---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 45.19.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  timeout: 20m
  values:
    fullnameOverride: prometheus

    alertmanager:
      config:
        global:
          slack_api_url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}/slack"
          resolve_timeout: 5m
        receivers:
          - name: 'null'
          - name: 'discord'
            slack_configs:
              - channel: '${ALERT_MANAGER_DISCORD_CHANNEL}'
                icon_url: '${ALERT_MANAGER_DISCORD_IMG_URL}'
                username: '${ALERT_MANAGER_DISCORD_USERNAME}'
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}
                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: ['alertname', 'job']
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 1h
          receiver: 'discord'
          routes:
            - receiver: 'null'
              match:
                alertname: Watchdog
            - receiver: 'discord'
              match_re:
                severity: critical|warning|error
              continue: true
        inhibit_rules:
          - source_match:
              severity: 'critical'
            target_match:
              severity: 'warning'
            equal: ['alertname', 'namespace']

      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - "alert-manager.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "alert-manager.${SECRET_DOMAIN}"

      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "ceph-block"
              resources:
                requests:
                  storage: 1Gi

    kube-state-metrics:
      fullnameOverride: kube-state-metrics

    kubeStateMetrics:
      enabled: true

    grafana:
      enabled: false
      forceDeployDashboards: true
      defaultDashboardsTimezone: browser
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance

    kubeApiServer:
      enabled: true

    kubeControllerManager:
      enabled: false
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true

    kubeScheduler:
      enabled: true
      endpoints:
        - 192.168.8.21
        - 192.168.8.22
        - 192.168.8.23
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true

    kubeEtcd:
      enabled: true
      endpoints:
        - 192.168.8.21
        - 192.168.8.22
        - 192.168.8.23
      service:
        enabled: true
        port: 2381
        targetPort: 2381

    kubeProxy:
      enabled: true
      endpoints:
        - 192.168.8.21
        - 192.168.8.22
        - 192.168.8.23

    prometheusOperator:
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi

    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${SECRET_DOMAIN}"
      resources:
        requests:
          memory: 512Mi
          cpu: 250m
        limits:
          memory: 2048Mi
          cpu: 500m

      thanosService:
        enabled: true

      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "ceph-block"
              resources:
                requests:
                  storage: 10Gi

        thanos:
          image: quay.io/thanos/thanos:v0.29.0
          version: v0.22.0
          objectStorageConfig:
            name: thanos-objstore-secret
            key: objstore.yml
            #          objectStorageConfig: |
            #            type: S3
            #            config:
            #              bucket: "thanos"
            #              endpoint: "nas02.${SECRET_DOMAIN}:9000"
            #              insecure: true
            #              access_key: "${SECRET_MINIO_THANOS_ACCESSKEY}"
            #             secret_key: "${SECRET_MINIO_THANOS_SECRETKEY}"

        additionalScrapeConfigs:
          - job_name: 'homeassistant'
            scrape_interval: 60s
            metrics_path: /api/prometheus
            bearer_token: ${SECRET_HOMEASSISTANT_PROMETHEUS_TOKEN}
            static_configs:
              - targets:
                  - "homeassistant.${SECRET_DOMAIN}"
